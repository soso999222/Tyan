#Quest1:	Поиск пикселя определенного цвета и щелчок по нему мышью
	Использованные инструкции (ознакомьтесь с ними в справке по языку):
		getscreen
		if_pixel_in .. end_if
		print
		lclick
		else
		halt
		
		Приведенный ниже код ищет на экране пиксель красного цвета, начиная с левого верхнего угла. Как только пиксель будет найден, поиск окончится. В данном примере обрабатываются как успешный поиск, так и неуспешный:
			// помещение текущего снимка экрана в буфер программы
			// это необходимо для работы всех графических функций и процедур
			getscreen 
			 
			// --- конструкция поиска пикселя в буфере экрана ---
			// координаты 0, 0, $_xmax, $_ymax описывают прямоугольную область, в которой будет осуществлен поиск. при этом $_xmax и $_ymax содержат максимально возможные значения для текущего разрешения экрана. 255 это код цвета, он соответствует красному. код цвета можно узнать в редакторе, наведя курсор на нужного цвета пиксель
			// сама инструкция поиска if_pixel_in по сути представляет собой условие, то есть выполнение кода, который описан внутри условия, зависит от результата проверки самого условия (если пиксель найден) с учетом всех вышеописанных параметров.
			if_pixel_in(0, 0, $_xmax, $_ymax, 255)
			 
			   // если пиксель заданного цвета найден, его координаты будут помещены в системные переменные $_return1 и $_return2. можно их распечатать в лог ...
			   print("Цвет обнаружен в координатах: ", $_return1, ,":", $_return2)
			 
			   // ... а можно сразу кликнуть по нему левой кнопкой мыши
			   lclick($_return1, $_return2)
			 
			else   // блок else (вместе с кодом) не обязателен, но он обеспечивает обработку ситуации, когда условие вернуло отрицательный результат
			 
			   // если ничего не найдено, выводим сообщение
			   print("ничего не найдено")
			 
			end_if   // конец условия
			 
			halt   // остановка скрипта, обеспечивает однократное выполнение

#Quest2:	Запуск блокнота и запись в нем произвольного текста.
	Данный скрипт запускает блокнот и 5 раз записывает в него строку "The quick brown fox jumps over the lazy dog:
	
	#name "Запись в блокнот"//Имя нашего скрипта
	EXECUTE("notepad.exe")//Запускаем программу notepad.exe. Команда EXECUTE равносильна окну "Выполнить" в Виндовс (Win+R).
	WNDSTATE(WNDFIND("Блокнот"), 1)//Разворачиваем окно в заголовке которого есть строка "Блокнот". 1 - означает развернуть, 0 - свернуть.   
	WAITMS(500)//Ждем чтобы блокнот окончательно запустился. 500 мс достаточно
	 
	FOR($i, $i < 5)//Начало цикла. Цифра 5 означает что цикл повторится 5 раз
	   KEYSTRING("The quick brown fox jumps over the lazy dog.", 20)//Вводим текст. 20 означает задержку в 20 мс между вводом каждой буквы
	   KEYPRESS(#ENTER)//Нажимаем Enter чтобы перевести строку. #ENTER - код клавиши Enter
	END_CYC//Заканчиваем цикл
	 
	HALT//Останавливаем скрипт
	
#Quest3:	Решил показать, как пользоваться WinAPI функцией
		POSTMESSAGE (hwnd, message, wParam, lParam)
		
		Ставим задачу:
			Нужно написать код, чтоб можно было кликать в окошке, которое находится позади других.
			Невозможно, скажете вы и ошибетесь ;D . Потому, как мы не будем эмулировать клик мыши, а станем посылать сообщение окну, в котором должен быть произведен клик. Нужно это для разных случаев, но мне пригодилось во флеш игре, в которой необходимо кликать мышкой каждую минуту(даже сейчас она кликает, нервно помигивая кнопкой на панели задач, пока я пишу эту статью).

			Что нам понадобится
			нам понадобится сама функция
			PostMessage(
				HWND hWnd,
				UINT Msg,
				WPARAM wParam,
				LPARAM lParam
			);

			hWnd - Дескриптор окна(грубо говоря - адрес), оконная процедура которого должна принять сообщение.
			Если подробнее, то кнопки, поля для ввода текста, раскрывающиеся списки, меню и т.д. - это и есть окна(с точки зрения Микрософт), а не только прямоугольная форма с крестиком, квадратиком и палочкой в правом верхнем углу(как думают большинство). И у каждого этого элемента есть свой hWnd. Означает, что нам нужно мышкой указывать не на форму, в которой находится кнопка, а именно на кнопку, у которой пытаемся узнать hWnd.

			Msg - Сообщение, которое должно быть поставлено в очередь. Сообщение цифровое и писать мы будем его цифрами. Есть куча сообщений, которые могут приходить окну. Вот небольшой список:
			wm_LButtonDblClk, wm_LButtonDown, wm_LButtonUp, wm_MButtonDblClk, wm_MButtonDown, wm_MButtonUp, wm_MouseMove, wm_NCLButtonDown, wm_NCLButtonUp, wm_NCLButtonDblClk, wm_NCMButtonDown, wm_NCMButtonDblClk, wm_NCMouseMove, wm_NCRButtonDown, wm_NCRButtonUp, wm_NCRButtonDblClk, wm_RButtonDown, wm_RButtonUp, wm_RButtonDblClk и т.п.
			И каждому такому сообщению выдан свой код(0x0201 — означает шестнадцатиричный вид, например 0x0201 = 513):
			
			
			WM_LBUTTONDOWN   =  0x0201  // Левая кнопка мыши нажата.
			WM_LBUTTONUP     =  0x0202  // Левая кнопка мыши отпущена.
			WM_RBUTTONDOWN   =  0x0204  // Правая кнопка мыши нажата.
			WM_RBUTTONUP     =  0x0205  // Правая кнопка мыши отпущена.
			WM_MOUSEMOVE     =  0x0200  // Мышь передвинута.
			WM_MOUSEWHEEL    = 	0x020A  // Кручение колесика мыши.
			
			wParam и lParam - Это 32-битовые парaметры. Для каждого случая свои. Но в нашем случае в первом параметре задается нажатые кнопки(если нажато несколько кнопок то они складываются, например нажаты вместе SHIFT и левая кнопка мыши — 0x0004 + 0x0001 = 0x0005):
			
			$WM_LBUTTONDOWN = 0x0201 // Левая кнопка мыши нажата.
			$WM_LBUTTONUP = 0x0202 // Левая кнопка мыши отпущена.
			$MK_LBUTTON = 0x0001 // Левая кнопка мыши находится в нажатом состоянии.
			 
			$HWND = 16515858 // изменяется при каждом запуске целевой программы,
							 // нужно каждый раз вписывать заного
			 
			$x = 100 // Координата по X
			$y = 100 // Координата по Y
			 
			//Отправляем сообщение окну о нажатой левой кнопке мыши
			postmessage($HWND, $WM_LBUTTONDOWN, $MK_LBUTTON, $x + ($y*65536))
			 
			//Мало-мало ждем, а можно и вообще не ждать,
			//   т.к. сообщения уходят в список и выполняются по порядку
			waitms(50) 
			 
			//Отправляем сообщение окну, что левую кнопку мыши отпустили
			postmessage($HWND, $WM_LBUTTONUP, $MK_LBUTTON, $x + ($y*65536))
			 
			// Завершаем программу
			halt
			
			Запускаем mspaint — стандартную рисовалку Windows, наводим мышь на белый холст и наблюдаем в редакторе кода за hWND. Пишем свое число вместо моего $HWND = и запускаем скрипт(Clickermann). Все. Теперь на холсте паинта стоит точка на расстоянии 100 пикселей от левого края холста(а не экрана!!!) и 100 пикселей от правого.

#Quest4:	Написание подпрограммы для вычисления даты
		Пример создания пользовательских подпрограмм и их подключения через директиву include
		Данный пример раскрывает возможность "прятать от глаз" большой громоздкий код в программные библиотеки.
		Имеется задача: вычислить текущую дату на основании системной переменной $_time_t
		Для этого была написана следующая подпрограмма, для удобства вынесенная в отдельный файл date.cms
			
			SUB(UPDATE_DATE)
		   $_date_y = 1970
		   $_date_m = 1
		   $_date_d = ROUND(($_time_t / (3600 * 24)) - $voi, 0) + 1//floor
		   $voi = 0.499999999999
		   $break = 0
		 
		   WHILE($break = 0)
			  $arg1 = $_date_y-1968
			  $arg2 = 4
			  IF($arg1-(ROUND(($arg1/$arg2)-$voi,0)*$arg2) = 0)//mod($_date_y-1968, 4) = 0
				 $nd = 366
			  ELSE
				 $nd = 365
			  END_IF
		 
			  if($_date_d > $nd)
				 INC($_date_d, 0-$nd)
				 INC($_date_y, 1)
			  ELSE
				 $break = 1
			  END_IF
		   END_CYC
		   $break = 0
		 
		   WHILE($break = 0)
			  $arg1 = $_date_y-1968
			  $arg2 = 4
			  IF( ($arg1-(ROUND(($arg1/$arg2)-$voi,0)*$arg2) = 0) & ($_date_m = 2) )//(mod($_date_y-1968, 4) = 0) & ($_date_m = 2)
				 $nd = 29
			  ELSE
				 $nd = STRCUT("31,28,31,30,31,30,31,31,30,31,30,31", (($_date_m-1) * 3) + 1, 2)
			  END_IF
			  IF($_date_d > $nd)
				 INC($_date_d, 0-$nd)
				 INC($_date_m, 1)
			  ELSE
				 $break = 1
			  END_IF
		   END_CYC
		END_SUB
		 
		UPDATE_DATE()
		
		=========
		После вызова эта подпрограмма создает следующие переменные, которые могут использоваться в вашей программе
		$_date_d - День
		$_date_m - Месяц
		$_date_y - Год


		Пример использования подпрограммы
		Код: Clickermann
		
		// Подключаем файл, содержащий подпрограмму UPDATE_DATE, это работает так же, как если бы вы просто скопировали все содержимое файла date.cms за место этой строчки
		#include "date.cms"  
		 
		print($_date_d,".",$_date_m,".",$_date_y) // Выводим "старую" дату
		 
		UPDATE_DATE() // Вызов подпрограммы (напоминаю что ее "тело" находится в подключенном файле date.cms), обновление переменных
		print($_date_d,".",$_date_m,".",$_date_y) // Выводим актуальную дату	 
		HALT
		
#Quest5:	Сортировка массива
		Эти алгоритмы выстраивают числа в массиве от меньших к большему.
		
		Простая сортировка:
			Код: Clickermann
			SUB(sort)
			 
			   $siz = ARRSIZE($arr)
			   $srtcheck = 0
			   $srt = 0
			   FOR($a=$siz-1,($a>0)&($srt=0),-1)
				  FOR($b=0,$b<$a)
					 IF($arr[$b] > $arr[$b+1])
						$srtcheck = 1
						$tmp = $arr[$b]
						$arr[$b] = $arr[$b+1]
						$arr[$b+1] = $tmp
					 END_IF
				  END_CYC
				  IF($srtcheck = 0)
					 $srt = 1
				  END_IF
			   END_CYC
			 
			END_SUB
			 
			arrpush ($arr, 454)
			arrpush ($arr, 66)
			arrpush ($arr, 43)
			arrpush ($arr, 77)
			arrpush ($arr, 22)
			arrpush ($arr, 1)
			 
			LOGCLEAR
			LOGWRITE ("Было")
			FOR($i = 0, $i < ARRSIZE($arr))
			   LOGWRITE ($arr[$i])
			END_CYC
			 
			LOGWRITE ("")
			sort()
			 
			LOGWRITE ("Стало")
			FOR($i = 0, $i < ARRSIZE($arr))
			   LOGWRITE ($arr[$i])
			END_CYC
			 
			HALT
			
		Парная сортировка (например сортировка координат) по первому числу:
			Код: Clickermann
			SUB(sort)
			 
			   $siz = ARRSIZE($arr)
			   $srtcheck = 0
			   $srt = 0
			   FOR($a=$siz-2,($a>0)&($srt=0),-2)
				  FOR($b=0,$b<$a,2)
					 IF($arr[$b] > $arr[$b+2])
						$srtcheck = 1
						$tmp = $arr[$b]
						$tmp2 = $arr[$b+1]
						$arr[$b] = $arr[$b+2]
						$arr[$b+1] = $arr[$b+3]
						$arr[$b+2] = $tmp
						$arr[$b+3] = $tmp2
					 END_IF
				  END_CYC
				  IF($srtcheck = 0)
					 $srt = 1
				  END_IF
			   END_CYC
			 
			END_SUB
			 
			arrpush ($arr, 22)
			arrpush ($arr, 66)
			arrpush ($arr, 22)
			arrpush ($arr, 77)
			arrpush ($arr, 22)
			arrpush ($arr, 88)
			 
			arrpush ($arr, 201)
			arrpush ($arr, 66)
			arrpush ($arr, 201)
			arrpush ($arr, 77)
			arrpush ($arr, 201)
			arrpush ($arr, 88)
			 
			arrpush ($arr, 10)
			arrpush ($arr, 66)
			arrpush ($arr, 10)
			arrpush ($arr, 77)
			arrpush ($arr, 10)
			arrpush ($arr, 88)
			 
			LOGCLEAR
			LOGWRITE ("Было")
			FOR($i = 0, $i < ARRSIZE($arr), 2)
			   LOGWRITE ($arr[$i]," : ",$arr[$i+1])
			END_CYC
			 
			LOGWRITE ("")
			sort()
			 
			LOGWRITE ("Стало")
			FOR($i = 0, $i < ARRSIZE($arr), 2)
			   LOGWRITE ($arr[$i]," : ",$arr[$i+1])
			END_CYC
			 
			HALT	
	
		Парная сортировка по первому затем по второму числу:
			SUB(sort)
			   $siz = ARRSIZE($arr)
			   $srtcheck = 0
			   $srt = 0
			   FOR($a=$siz-2,($a>0)&($srt=0),-2)
				  FOR($b=0,$b<$a,2)
					 IF($arr[$b] > $arr[$b+2])
						$srtcheck = 1
						$tmp = $arr[$b]
						$tmp2 = $arr[$b+1]
						$arr[$b] = $arr[$b+2]
						$arr[$b+1] = $arr[$b+3]
						$arr[$b+2] = $tmp
						$arr[$b+3] = $tmp2
					 END_IF
				  END_CYC
				  IF($srtcheck = 0)
					 $srt = 1
				  END_IF
			   END_CYC
			   $srtcheck = 0
			   $srt = 0
			   FOR($a=$siz-2,($a>0)&($srt=0),-2)
				  FOR($b=0,$b<$a,2)
					 IF($arr[$b] = $arr[$b+2])
						IF($arr[$b+1] > $arr[$b+3])
						   $srtcheck = 1
						   $tmp = $arr[$b+1]
						   $tmp2 = $arr[$b+3]
						   $arr[$b+1] = $tmp2
						   $arr[$b+3] = $tmp
						END_IF
					 END_IF
				  END_CYC
				  IF($srtcheck = 0)
					 $srt = 1
				  END_IF
			   END_CYC
			 
			END_SUB
			 
			arrpush ($arr, 22)
			arrpush ($arr, 60)
			arrpush ($arr, 22)
			arrpush ($arr, 77)
			arrpush ($arr, 22)
			arrpush ($arr, 88)
			 
			arrpush ($arr, 201)
			arrpush ($arr, 66)
			arrpush ($arr, 201)
			arrpush ($arr, 30)
			arrpush ($arr, 201)
			arrpush ($arr, 88)
			 
			arrpush ($arr, 10)
			arrpush ($arr, 66)
			arrpush ($arr, 10)
			arrpush ($arr, 77)
			arrpush ($arr, 10)
			arrpush ($arr, 28)
			 
			LOGCLEAR
			LOGWRITE ("Было")
			FOR($i = 0, $i < ARRSIZE($arr), 2)
			   LOGWRITE ($arr[$i]," : ",$arr[$i+1])
			END_CYC
			 
			LOGWRITE ("")
			sort()
			 
			LOGWRITE ("Стало")
			FOR($i = 0, $i < ARRSIZE($arr), 2)
			   LOGWRITE ($arr[$i]," : ",$arr[$i+1])
			END_CYC
			 
			HALT

#Quest6:	Распознавание чисел
		#name "Распознавание чисел"
		// Author: Vint
		// Version: 1.4 (14.04.2015)
		// Скрипт для Clickermann v4.11 002
		 
		// подключение number_read
		// #include "Распознавание чисел 1.4.cms"
		 
		//==============================================================================
		SUB(LOG_ARR)
		   //LOGWRITE ("Размер массива: ",ARRSIZE($num))
		   LOGWRITE (" ")
		   LOGWRITE ("    0    1    2    3    4    5    6    7    8    9    .")
		   LOGWRITE (" ")
		   $maxn = 0
		   FOR ($i=0, $i < 11)
			  IF($num[$i] > $maxn)
				 $maxn = $num[$i]
			  END_IF
		   END_CYC
		 
		   FOR($row=0, $row < 2)
			  $text = ""
			  FOR ($i=0, $i < 10)
				 $l = $num[11*$row + $i]
				 FOR ($j=0, $j < (5 - STRLEN($l)))
					$text = STRCONCAT($text, " ")
				 END_CYC
				 $text = STRCONCAT($text, $l)
			  END_CYC
			  LOGWRITE ($text)
		   END_CYC
		   LOGWRITE (" ")
		 
		   FOR($row=2,$row < $maxn + 2)
			  $text = ""
			  FOR ($i=0, $i < 11)
				 IF($num[$i] > ($row - 2))
					$l = $num[11*$row + $i]
				 ELSE
					$l = "X"
				 END_IF
		 
				 FOR ($j=0, $j < (5 - STRLEN($l)))
					$text = STRCONCAT($text, " ")
				 END_CYC
				 $text = STRCONCAT($text, $l)
			  END_CYC
			  LOGWRITE ($text)
		   END_CYC
		   LOGWRITE (" ")
		END_SUB
		 
		//==============================================================================
		 
		SUB(number_read, $f_x1,$f_y1,$f_x2,$f_y2, $pref)
		   // $f_x1, $f_y1		область ЛевоВерх
		   // $f_x2, $f_y2		область ПравоНиз
		   // $pref = "textures\digit_"		префикс имён файлов с цифрами (для разных шрифтов)
		 
		   // Результат возвращается в $res если не найдено $res=-1
		 
		   // Только целые числа.
		   // $pref  зависит от шрифта поиска
		 
		   $res = -1						// очищаем ответ
		   UNDEFINE($num)				// главный массив данных
		   UNDEFINE($n_temp)		// временный массив для SCANPICTURE
		 
		   GETSCREEN
		   FOR ($i=0, $i < 11)
			  SCANPICTURE($n_temp, $f_x1,$f_y1,$f_x2,$f_y2, STRCONCAT($pref,$i,".bmp"))
			  $a_size = ARRSIZE($n_temp)
			  $num[$i] = $a_size / 2		// заносим количество элементов в этом разряде
			  $num[$i+11] = 0						// счётчик разрядов, пока 0
			  IF($a_size > 0)
				 FOR($j=0, $j < $a_size, 2)
					$num[11*($j/2 + 2)+ $i] = $n_temp[$j] // заносим коорд X в массив
				 END_CYC
				 UNDEFINE($n_temp)
			  END_IF
		   END_CYC
		 
		   IF(ARRSIZE($num) > 0)
			  IF($log = 1)
				 LOG_ARR()
			  END_IF
		 
			  $repeat = 1
			  WHILE($repeat = 1)
				 $empty = 0
				 $xmin = 5000
				 $pos_min = 0
				 FOR ($i=0, $i < 11)
					IF($num[$i] > ($num[11 + $i]))
					   $empty = 1
					   $l = $num[11 * ($num[11+$i]+2) + $i]
					   IF($l < $xmin)
						  $xmin = $l
						  $pos_min = $i
					   END_IF
					END_IF
				 END_CYC
		 
				 IF($empty = 0)
					$repeat = 0
				 ELSE
					IF($res = -1)
					   $res = STRCONCAT("", $pos_min)   // если первыё символ
					ELSE
					   IF($pos_min < 10)
						  $res = STRCONCAT($res, $pos_min) // последующие символы цифры
					   ELSE
						  $res = STRCONCAT($res, ".") // последующие символы  зпт
					   END_IF   
					END_IF
					$num[11 + $pos_min] = ($num[11 + $pos_min]) + 1 // INC счётчик для разряда
				 END_IF
			  END_CYC
			  //$res = ROUND($res, -8)
		   ELSE
			  LOGWRITE ("число не найдено")
		   END_IF
		END_SUB
		 
		//LOGCLEAR
		//$log = 1
		//number_read(271,385,335,401, "textures\digit_")
		//LOGWRITE ("Найдено число:  ",$res)
		//HINTPOPUP("Найдено число:  ",$res)
		//HALT
		
#Quest7:	Ближайшая к заданным координатам/центру картинка:
	#name "Ближайшая к заданным координатам/центру картинка"
	// Author: Vint
	// Version: 1.0 (14.10.2013)
	 
	// цель
	$Xtarget = 500
	$Ytarget = 500
	 
	// цель - центр экрана
	//$Xtarget = ($_xmax+1) / 2
	//$Ytarget = ($_ymax+1) / 2
	 
	 
	GETSCREEN(0,0, $_xmax,$_ymax)
	SCANPICTURE($scan, 0,0, $_xmax,$_ymax, "picture.bmp", -1, 100)
	 
	$dist = 10000
	$scan_size = ARRSIZE($scan)
	FOR($i=0, $i < $scan_size, 2)
		$X = $scan[$i]
		$Y = $scan[$i+1]
		$d_temp = DIST($Xtarget, $Ytarget, $X, $Y)
		IF($d_temp < $dist)
			$dist = $d_temp
			$Xdot_target = $X
			$Ydot_target = $Y
		END_IF
		IF($Y > ($Ytarget + $dist))
			$i = $scan_size
		END_IF
	END_CYC
	UNDEFINE($scan)
	 
	IF($dist ! 10000)
		LOGWRITE ("Ближайшая картинка к заданным координатам X/Y: ", $Xdot_target, " / ", $Ydot_target)
	ELSE
		LOGWRITE ("Картинка не найдена")
	END_IF
	 
	HALT
	
#Quest8:	Ближайший к заданным координатам пиксель
	#name "Ближайший к заданным координатам пиксель"
	// цель
	$Xtarget = 500
	$Ytarget = 500
	 
	GETSCREEN
	SCANPXL($scan, 0,0, $_xmax,$_ymax, 255)
	 
	$dist = 10000
	$scan_size = ARRSIZE($scan)
	FOR($i=0, $i < $scan_size, 2)
		$X = $scan[$i]
		$Y = $scan[$i+1]
		$d_temp = DIST($Xtarget, $Ytarget, $X, $Y)
		IF($d_temp < $dist)
			$dist = $d_temp
			$Xdot_target = $X
			$Ydot_target = $Y
		END_IF
		IF($Y > ($Ytarget + $dist))
		   $i = $scan_size 
		END_IF    
	END_CYC
	UNDEFINE($scan)
	 
	IF($dist ! 10000)
		LOGWRITE ("Ближайший пиксель к заданным координатам X/Y: ", $Xdot_target, " / ", $Ydot_target)
	ELSE
		LOGWRITE ("Заданный цвет не найден")
	END_IF
	 
	HALT
 
#Quest9:	ШИКАРНЫЙ (и достаточно простой) симулятор человеческого движения мыши WindMouse
	Менять скорость параметром $m0, скорость ветра $w0, расстояние замедления перед остановкой $d0, гравитацию - $g0

		// Mouse movement that's affected by gravity and wind physics laws
		// https://ben.land/post/2021/04/25/windmouse-human-mouse-movement/
		sub(hyp, $A, $B)
			$R1 = round(sqrt($A*$A + $B*$B), 0)
		end_sub
		 
		sub(min, $A, $B)
			if($A > $B)
				$R1 = $B
			else
				$R1 = $A
			end_if
		end_sub
		 
		sub(rand, $A, $B, $round)   // если round=1, округляет результат
			$rand = rnd(0, 1000000)
			$rnd = $A + ($B - $A)*$rand/1000000
		 
			if($round = 1)
				$rnd = round($rnd, 0)
			end_if
		end_sub
		 
		sub(mouse_init)
			$SQRT3 = sqrt(3)
			$SQRT5 = sqrt(5)
		 
			$cX = $_xmouse
			$cY = $_ymouse
			$mDist = round(dist($cX, $cY, $eX, $eY), 0) + 1
		 
			// скорости по осям X и Y
			$vX = 0
			$vY = 0
			$vMag = 0
			$wX = 0
			$wY = 0
			$wMag = 0
			$tMMax = $_time_t + rnd(4,6)
		 
			rand(8,9,0)
			$g0 = $rnd     // magnitude of the gravitational force                        (влияет на амплитуду волны)
		 
			rand(0,100,0)
			if($rnd < 10)  // в 10% сильный ветер
				rand(2,4,0)
				$w0 = $rnd     // magnitude of the wind force fluctuations                    (влияет на длину волны)
			else
				rand(0.8,2,0)
				$w0 = $rnd
			end_if
		 
			rand(15,25,0)
			$m0 = $rnd     // maximum mouse_step size (velocity clip threshold)           (влияет на скорость волны)
		 
			rand(2,8,0)
			$d0 = $rnd     // distance where wind behavior changes from random to damped  (влияет на затухание волны)
		end_sub
		 
		sub(mouse_step)      // считает скорость по осям X и Y, вычисляет координаты следующего шаг
			min($m0, $mDist)
			$m0 = $R1
		 
			min($w0, $mDist)    // чтобы не перепрыгнуть цель
			$wMag = $R1
		 
			if($mDist > $d0)
				rand(-$wMag, $wMag, 0)
				$wX = $wX / $SQRT3 + $rnd / $SQRT5
		 
				rand(-$wMag, $wMag, 0)
				$wY = $wY / $SQRT3 + $rnd / $SQRT5
			else
				$wX = $wX / $SQRT3
				$wY = $wY / $SQRT3
		 
				if($m0 < 1)
					$m0 = 1
				else
					if($m0 > 2)    // чтобы замедлиться перед остановкой
						$m0 = $m0 / $SQRT3
					end_if
				end_if
			end_if
		 
			// "ветер" и "гравитация" влияют на скорость мыши по осям
			$vX = $vX + $wX + $g0 * ($eX - $cX)/$mDist
			$vY = $vY + $wY + $g0 * ($eY - $cY)/$mDist
			hyp($vX, $vY)
			$vMag = $R1
		 
			if($vMag > $m0)    // чтобы не перепрыгнуть цель
				rand(0,$m0,0)
				$vClip = $m0/2 + $rnd/2
				$vX = ($vX/$vMag) * $vClip
		 
				rand(0,$m0,0)
				$vClip = $m0/2 + $rnd/2
				$vY = ($vY/$vMag) * $vClip
			end_if
		 
			$mX = round($cX + $vX, 0)           // where to move
			min($mX, $_xmax)
			max($R1, 0)
			$mX = $R1
			$mY = round($cY + $vY, 0)
			min($mY, $_ymax)
			max($R1, 0)
			$mY = $R1
		 
			if(($cX != $mX) or ($cY != $mY))
				move($mX, $mY)
				$cX = $_xmouse
				$cY = $_ymouse
			end_if
		end_sub
		 
		sub(wind_mouse, $eX, $eY, $wMin, $wMax)
			mouse_init()
		 
			while(($mDist > 2) and ($_time_t < $tMMax))    // разброс вокруг цели <= 3
				mouse_step()
		 
				$mDist = round(dist($cX, $cY, $eX, $eY), 0)
			end_cyc
		 
			waitms(rnd($wMin,$wMax))
		end_sub
		
#Quest10:	Многопоточность в Clickermann
	Как все знают со школы, Windows – многозадачная операционная система. Впрочем, как и большинство современных ОС, за исключением особо специализированных. Это значит, что на машине под управлением ОС могут одновременно выполняться несколько задач, в нашем случае приложений. Можно долго рассуждать на тему, что одно неудачное действие повесит все намертво и что задачи выполняются не параллельно, а просто быстро переключаются друг между другом. Но примем это за аксиому.
	Подобно этому, в составе приложения можно организовать несколько потоков (нитей, англ. thread). И они точно так же могут выполняться параллельно, как и сами приложения. С рядом оговорок. Во-первых, потоки могут свободно использовать общие данные своего родительского приложения. Во-вторых (хотя косвенно это вытекает из первого) потоки могут останавливать друг друга, снова запускать и так далее.
	Для чего нужны потоки? Для оптимизации работы. Если взять за догмат то, что две параллельные задачи выполняются по крайней мере не медленнее, чем две последовательные (хотя это спорное утверждение), то целесообразно наиболее ресурсоемкие выделять в отдельные потоки. Это позволит выиграть в общем логическом быстродействии. Поясню почему. Если один какой-то поток повиснет, серьезно задумается или в нем произойдет сбой, это не убьет (замедлит) приложение целиком. Это вы можете наблюдать например в браузере Хром, где повисание одной вкладки не парализует весь браузер. Огнелиса так не умеет…
	Существует лишь одна особенность – разделение ресурсов. При прочих, равных нельзя знать в какой момент начнет и бросит выполняться поток, помещать в них стоит относительно автономные задачи. Плохая идея в одном потоке наращивать переменную, а в другом записывать ее значение в файл столбиком. Пропуски значений и наоборот повторяющиеся – обычное дело при данном некорректном логическом подходе. Для решения этой задачи используются общие переменные флаги – «семафоры», анализируя которые потоки понимают, какой из них отработал и чья очередь теперь выполнить свою задачу.
	Перейдем наконец к коду. Поток в кликермане объявляется следующим, похожим на подпрограмму, образом.
	Код: Clickermann
	
	
	Thread(thr_name)
		// тело потока
	End_thread 
	
	Данный поток с именем thr_name начнет крутиться сразу после старта скрипта. Если вы хотите что бы поток запустился позже, то необходимо в шапке после имени добавить 0. То есть:
		Thread(thr_name, 0)
			// тело потока
		End_thread 
	
	Теперь данный поток можно запустить лишь из самого скрипта специальной процедурой контроля потоков setThread:
		setThread(thr_name, 1)
	
	в которой thr_name – имя потока, а 1 – присваиваемое состояние «запущен», заменив которое на 0 можно так же приостановить поток. Потоки могут невозбранно контролировать друг друга.

	Каждый поток обладает собственным адресным пространством, поэтому задержка wait() в одном ни коим образом не влияет на остальные потоки. При этом, потоки имеют доступ к общим переменным и графическому буферу. Стоит отметить, что из-за особенностей архитектуры кликера, подпрограммы Sub() не могут разделяться потоками, поэтому для каждого они индивидуальны и должны быть объявлены внутри потока. Другими словами, подпрограммы описанные внутри одного потока не могут быть вызваны другим потоком.
	Основное (абстрактно) тело скрипта, даже если оно описано без thread() .. end_thread так же является отдельным потоком, поэтому для него справедливо все вышесказанное. Поэтому фактически, сценарии вида:
	
	Thread(thr1)
	   Wait(1)
	End_thread
	 
	Print("Hello")
	Wait(3)
	
	&
	
	Thread(thr1)
		Wait(1)
	End_thread
	 
	Thread(thr2)
	   Print("Hello")
	Wait(3)
	End_thread
	
	= Абсолютно одинаковы.
	
	Последнее что вам необходимо знать, это то, что как и основной скрипт, потоки должны «давать передохнуть» процессору, поэтому потрудитесь разместить внутри них wait’ы, на которые он обязательно наткнется, иначе ваш сценарий будет серьезно нагружать процессор в ряде случаев.
	
	
	Несколько показательных примеров
	Первый случай, о котором иногда спрашивают – это нажатие клавиш (да и вообще действия) по интервалу. Например, каждые 3 секунды жмем A, каждые 5 секунд – B. В обычном случае нам бы потребовался единичный интервал (секунда) и два счетчика, которые наращиваются. Затем в двух условиях проверяются их значения и если счетчик достиг 3 (или 5) то выполняются действия и счетчик обнуляется. Два счетчика нужны, потому что действия независимы друг от друга. Сам скрипт выглядит так (для удобства сами нажатия заменены на вывод в лог):
		wait(1)
		$cnt1 = $cnt1 + 1
		$cnt2 = $cnt2 + 1
		 
		if($cnt1 = 3)
		   print("A")
		   $cnt1 = 0
		end_if
		 
		if($cnt2 = 5)
		   print("B")
		   $cnt2 = 0
		end_if
		
		При этом, если внутри условия будет ряд других затратных инструкций или упаси Боже задержка – в классическом решении реализовать такое было бы весьма затратно (приходилось бы вычислять временные затраты на каждое действие, вводить поправки на разницу и т.д.)
		Реализуем тот же самый скрипт на потоках:
		
		thread(th1)
		   print("A")
		   wait(3)
		end_thread
		 
		thread(th2)
		   print("B")
		   wait(5)
		end_thread
		
		Как вы видите, во первых скрипт стал более компактный и гораздо удобнее воспринимается визуально. Во вторых, даже если в первом потоке реализовать часовую задержку, второй поток стабильно продолжит чеканить B каждые 5 секунд.

		Второе распространенное решение –  реализация псевдо хоткеев через iskeydown(). Как вы знаете эта функция проверяет нажата ли клавиша. Но проверить это она может только в момент собственного выполнения. То есть если у вас есть два условия с iskeydown() и первое сработало, то в том случае если внутри него будут пресловутые задержки и долгие действия, проверить нажатие второй клавиши удастся только когда первое условие отработает целиком.
		Пример старого образца. Два последовательных условия, которые в случае нажатия клавиши печатают ее в лог каждые 3 секунды наши любимые буквы A и B. Поскольку задержка в каждом условии составляет 3 секунды, то у вас не получится вывести в протокол сразу обе буквы даже если вы зажмете обе клавиши одновременно.
		if (iskeydown(#A)=1)
		   print("A")
		   wait(3)
		end_if 
		if (iskeydown(#B)=1)
		   print("B")
		   wait(3)
		end_if
		waitms(10)
		
		Безусловно, можно попробовать добавить третье условие двойной проверки обоих нажатий iskeydown() & iskeydown(), но тогда будут срабатывать и одиночные условия, ведь клавиша то зажата. Неразрешимая для неискушенного программиста задача элементарно решается введением потоков под каждый хоткей:
		thread(th1)
		   if (iskeydown(#A)=1)
			  print("A")
			  wait(3)
		   end_if
		   waitms(10)
		end_thread
		 
		 
		thread(th2)
		   if (iskeydown(#B)=1)
			  print("B")
			  wait(3)
		   end_if
		   waitms(10)
		end_thread
		
		Визуально код стал более объемным, однако не стоит забывать, что в отличие от первого, этот – работает. Вы легко можете зажимать клавиши хоть одновременно, хоть как – такты не собьются.
		Таким образом, потоки позволяют легко решить ряд прикладных задач, которые до этого решались если не запущенными копиями кликера, то как минимум жуткими костылями. И их потенциал неограничен приведенными примерами, конечно же.
		
		
#Quest11:		
